

haveRX:
	; Check if have any data in RX ringbuffer, without picking up. Returns number of bytes.
	; max 9
	banksel 0
	movf l_bufRXin,0
	return

haveTX:
	; Check if have any data in TX. Returns number of bytes.
	; max 9
	banksel 0
	movf l_bufTXout,0
	subwf l_bufTXin,0
	btfss STATUS,C
	addlw bufferTXend-bufferTX
	return



putTX:
	; put a byte into the TX ringbuffer
	; max 45
	banksel 0
	movwf ml_temp
	movlw high bufferTX
	movwf FSR0H
	movlw low bufferTX
	addwf l_bufTXin,0
	movwf FSR0L
	btfsc STATUS,C
	incf FSR0H,1
	movf ml_temp,0
	movwi FSR0++
	incf l_bufTXin,1
	movlw bufferTXend-bufferTX
	subwf l_bufTXin,0
	btfsc STATUS,C
	clrf l_bufTXin
	; fall through to textTX function

testTX:
	; Check if there is a byte to transfer from ringbuffer to TX hardware
	; max 27
	banksel 0
	btfss PIR1,4	; TXIF
	retlw 0
	movf l_bufTXout,0
	subwf l_bufTXin,0
	btfsc STATUS,Z
	retlw 0
	btfss STATUS,C
	retlw 0
	movlw high bufferTX
	movwf FSR0H
	movlw low bufferTX
	addwf l_bufTXout,0
	movwf FSR0L
	btfsc STATUS,C
	incf FSR0H,1
	banksel TXREG
	moviw 0[FSR0]
	call numBits
	bcf TXSTA,0	;TX9D
	btfsc WREG,0
	bsf TXSTA,0	;TX9D
	moviw 0[FSR0]
	movwf TXREG
	banksel 0
	incf l_bufTXout,1
	retlw 1

testRX:
	; Check if there is a byte to transfer from RX hardware to ringbuffer
	; max 21
	banksel 0
	btfss PIR1,5	; RCIF
	retlw 0
	movlw bufferRXend-bufferRX
	subwf l_bufRXin,0
	btfsc STATUS,C
	decf l_bufRXin,1
	movlw high bufferRX
	movwf FSR0H
	movlw low bufferRX
	addwf l_bufRXin,0
	movwf FSR0L
	banksel RCREG
	movf RCREG,0
	movwi 0[FSR0]
	call numBits
	xorwf RCSTA,0
	banksel 0
	; have parity in WREG #0. For S-Bus, it should be 0.
	andlw 1
	addwf l_parityErrorsRX,1
	incf l_bufRXin,1
	retlw 1



;def numbits(i):
; res=0
; while(i):
;  res += 1
;  i = i & (i-1)
; return res
;
;l = list("0x34%02X"%numbits(i) for i in xrange(256))
;for j in xrange(0,256,16):
; print 'dw '+','.join(l[j:j+16])
numBits:
	brw
	dw 0x3400,0x3401,0x3401,0x3402,0x3401,0x3402,0x3402,0x3403,0x3401,0x3402,0x3402,0x3403,0x3402,0x3403,0x3403,0x3404
	dw 0x3401,0x3402,0x3402,0x3403,0x3402,0x3403,0x3403,0x3404,0x3402,0x3403,0x3403,0x3404,0x3403,0x3404,0x3404,0x3405
	dw 0x3401,0x3402,0x3402,0x3403,0x3402,0x3403,0x3403,0x3404,0x3402,0x3403,0x3403,0x3404,0x3403,0x3404,0x3404,0x3405
	dw 0x3402,0x3403,0x3403,0x3404,0x3403,0x3404,0x3404,0x3405,0x3403,0x3404,0x3404,0x3405,0x3404,0x3405,0x3405,0x3406
	dw 0x3401,0x3402,0x3402,0x3403,0x3402,0x3403,0x3403,0x3404,0x3402,0x3403,0x3403,0x3404,0x3403,0x3404,0x3404,0x3405
	dw 0x3402,0x3403,0x3403,0x3404,0x3403,0x3404,0x3404,0x3405,0x3403,0x3404,0x3404,0x3405,0x3404,0x3405,0x3405,0x3406
	dw 0x3402,0x3403,0x3403,0x3404,0x3403,0x3404,0x3404,0x3405,0x3403,0x3404,0x3404,0x3405,0x3404,0x3405,0x3405,0x3406
	dw 0x3403,0x3404,0x3404,0x3405,0x3404,0x3405,0x3405,0x3406,0x3404,0x3405,0x3405,0x3406,0x3405,0x3406,0x3406,0x3407
	dw 0x3401,0x3402,0x3402,0x3403,0x3402,0x3403,0x3403,0x3404,0x3402,0x3403,0x3403,0x3404,0x3403,0x3404,0x3404,0x3405
	dw 0x3402,0x3403,0x3403,0x3404,0x3403,0x3404,0x3404,0x3405,0x3403,0x3404,0x3404,0x3405,0x3404,0x3405,0x3405,0x3406
	dw 0x3402,0x3403,0x3403,0x3404,0x3403,0x3404,0x3404,0x3405,0x3403,0x3404,0x3404,0x3405,0x3404,0x3405,0x3405,0x3406
	dw 0x3403,0x3404,0x3404,0x3405,0x3404,0x3405,0x3405,0x3406,0x3404,0x3405,0x3405,0x3406,0x3405,0x3406,0x3406,0x3407
	dw 0x3402,0x3403,0x3403,0x3404,0x3403,0x3404,0x3404,0x3405,0x3403,0x3404,0x3404,0x3405,0x3404,0x3405,0x3405,0x3406
	dw 0x3403,0x3404,0x3404,0x3405,0x3404,0x3405,0x3405,0x3406,0x3404,0x3405,0x3405,0x3406,0x3405,0x3406,0x3406,0x3407
	dw 0x3403,0x3404,0x3404,0x3405,0x3404,0x3405,0x3405,0x3406,0x3404,0x3405,0x3405,0x3406,0x3405,0x3406,0x3406,0x3407
	dw 0x3404,0x3405,0x3405,0x3406,0x3405,0x3406,0x3406,0x3407,0x3405,0x3406,0x3406,0x3407,0x3406,0x3407,0x3407,0x3408


